---
title: "Week 3 Lab"
subtitle: "Data wrangling: import, tidy, and transform"
execute: 
  output: false
---

[![Source: r4ds](image/whole_game.png)](https://r4ds.hadley.nz/whole-game) 

Data wrangling/manipulation is the most important part when we deal with any types of data - before visualization and modeling. We will be mainly following [*R for Data Science*](https://r4ds.hadley.nz/), which includes importing data, transforming data, and "tidying" data.

```{r message = F}
library(tidyverse)
library(janitor)
getwd()
#setwd("~/COMM 605/Tutorial/") # no need to set up if you are opening a Rproject
```

## Understanding data frame

### Create a data frame
```{r}
height <- c(180, 155, 160, 167, 181)
weight <- c(65, 50, 52, 58, 70)
names <- c("Joanna", "Charlotte", "Helen", "Karen", "Amy")

data <- data.frame(height = height, weight = weight, names = names) #stringsAsFactors = TRUE
data
dim(data)
str(data)
```
### Positional index
```{r}
data[1,3] # the first value (1st row ) of the names variable (3th column)
data$names[1]
data[1:2, 2:3] #  the first 2 rows and the last 2 columns
data[1:2, ]
data[, 2:3]
```
### Ordering data frames
```{r}
height_order <- data[order(data$height), ]
rownames(height_order) <- 1:nrow(height_order)
height_order

height_order <- data[order(data$height, decreasing = T),]
```
### Adding/Removing columns and rows
```{r}
data2 <- data.frame(state = c("NY", "PA", "MD", "VA", "MA"))
data_newcolumn <- cbind(data, data2)

data_removecolumn <- data_newcolumn[, c(1:2, 4)]
data_newcolumn$state <- NULL

data3 <- data.frame(height = c(120, 150, 132, 122),
                    weight = c(44, 56, 49, 45),
                    names = c("Ryan", "Chris", "Ben", "John"))
data_newrow <- rbind(data, data3)
data_removerow <- data_newrow[c(1,6:9),]

```


### Merging data frames
Here are two fictitious datasets of a clinical trial. One table contains demographic information of the patients and the other one adverse events recorded throughout the course of the trial.

```{r}
demographics <- data.frame(
  id = c("P1", "P2", "P3"),
  age = c(40, 54, 47),
  state = c("NY", "MA", "PA"),
  stringsAsFactors = FALSE
)

adverse_events <- data.frame(
  id = c("P1", "P1", "P3", "P4"),
  term = c("Headache", "Neutropenia", "Constipation", "Tachycardia"),
  onset_date = c("2020-12-03", "2021-01-03", "2020-11-29", "2021-01-27"),
  stringsAsFactors = FALSE
)

```
```{r}
merge(demographics, adverse_events, by = "id")
merge(demographics, adverse_events, by = "id", all.x = T)
merge(demographics, adverse_events, by = "id", all.y = T)
merge(demographics, adverse_events, by = "id", all = T)
```
```{r}
adverse_events2 <- adverse_events
colnames(adverse_events2)[1] <- "pat_id"
merge(demographics, adverse_events2, by.x = "id", by.y = "pat_id", all = T)
```
### Exercise
Please merge the following two datasets `emp_df` (employee information)and `dept_df` (department information) using two ID columns `dept_id` and `dept_branch_id`.
```{r}
emp_df=data.frame(
  emp_id=c(1,2,3,4,5,6),
  name=c("Chris","Rose","Williams","Jones","Jayden","Xavior"),
  superior_emp_id=c(1,1,1,2,2,2),
  dept_id=c(10,20,10,10,40,30),
  dept_branch_id= c(101,102,101,101,104,103)
)

dept_df=data.frame(
  dept_id=c(10,20,30,40),
  dept_name=c("Finance","Marketing","Sales","IT"),
  dept_branch_id= c(101,102,103,104)
)

```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
merge(emp_df, dept_df, by = c("dept_id", "dept_branch_id"), all.x = T)

```

## Data importing (and exporting)

Common data formats:

-   CSV (comma-seperated values) / TSV (tab-seperated values)
-   xlsx
-   txt
-   other softwares/packages: .sav(SPSS), .dta(STATA)

Common data types in R:

-   data frame
-   tibble (`tbl_df`): it does much less than a data frame (a neater data frame), as it never changes the type of the inputs (e.g. it keeps list columns unchanged, and never converts strings to factors), it never changes the names of variables, it only recycles inputs of length 1, and it never creates `row.names()`.

```{r}
data <- data.frame(a = 1:26, b = letters[1:26], c = Sys.Date() - 1:26)
data
as_tibble(data)
```

```{r}
students <- read.csv("https://pos.it/r4ds-students-csv") # from URL
students <- read.csv("data/students.csv") # from local
students
str(students)
summary(students)
```

```{r}
students <- read.csv("data/students.csv", na.strings=c("N/A", ""))
# students <- read_csv("data/students.csv", na = c("N/A", ""))
```

#### ❓ **Question:**: What is are the differences between `read.csv` and `read_csv`?

### Basic data cleaning

```{r}
str(students)
students %>%
  rename(student_id = Student.ID,
         full_name = Full.Name,
         fav_food = favourite.food)

rename(students,
       student_id = Student.ID,
       full_name = Full.Name,
       fav_food = favourite.food)

students_rename <- students %>%
                   rename(student_id = Student.ID,
                          full_name = Full.Name,
                          fav_food = favourite.food)

```

```{r}
# a faster way
students_rename <- clean_names(students)
students_rename <- mutate(students_rename, meal_plan = factor(meal_plan))
str(students_rename)

```

```{r}
students_clean <- students_rename %>%
                  mutate(age = if_else(age == "five", "5", age))

#students_rename2 <- students_rename
#students_rename2$age <- ifelse(students_rename2$age == "five", 5, students_rename2$age)
#students_rename2$age[students_rename2$age == "five"] <- 5

```

Note: `if_else()` has three arguments. The first argument test should be a logical vector. The result will contain the value of the second argument, yes, when test is TRUE, and the value of the third argument, no, when it is FALSE. Here we're saying if age is the character string "five", make it "5", and if not leave it as age.

```{r}
students_clean_final <- students_clean %>%
                        mutate(group = case_when(
                          age <= 5 ~ "young",
                          age > 5 ~ "old",
                          .default = "other"
                        ))
```

#### ❓ **Question**: how to use pipe `%>%` to save some time here?

```{r}
#| code-fold: true
#| code-summary: "Show the code"
students_clean_final <- students %>%
                        clean_names() %>%
                        mutate(meal_plan = factor(meal_plan),
                               age = parse_number(if_else(age == "five", "5", age)),
                               group = case_when(
                                       age <= 5 ~ "young",
                                       age > 5 ~ "old",
                                       .default = "other"))

```

```{r}
write.csv(students_clean_final, "data/students_final.csv", row.names = F)
```


## Data tidying

In real life, the social media data you collected is "messy" and "dirty".

> Data Scientists spend up to 80% of the time on data cleaning and 20 percent of their time on actual data analysis. [^1]

[^1]: Dasu, T. & Johnson, T. (2003). *Exploratory Data Mining and Data Cleaning*.

The process of "tidying" data would thus create what's known as tidy data, as populated by Hadley Wickham (one of the authors of *R for Data Science*).

> Tidy datasets provide a standardized way to link the structure of a dataset (its physical layout) with its semantics (its meaning). [^2]

[^2]: Wickham, H. (2014). *Journal of Statistical Software*, *59*(10), 1--23. <https://doi.org/10.18637/jss.v059.i10>

Each dataset shows the same values of four variables: country, year, population, and number of documented cases of TB (tuberculosis), but each dataset organizes the values in a different way.

#### ❓ **Question**: are they the same datasets? Which one is easier to work with and why?

```{r, output=TRUE}
table1
table2
table3
```



A tidy data set is:

-   Each variable is a column; each column is a variable.
-   Each observation is a row; each row is an observation.
-   Each value is a cell; each cell is a single value.

[![Source: r4ds](image/tidy-1.png)](https://r4ds.hadley.nz/data-tidy)

Let's work with the `table1` here. 

```{r}
# Compute rate per 10,000
tb_table <- table1 %>%
  mutate(rate = cases / population * 10000)
```
```{r}
tb_year <- table1 %>% 
  group_by(year) %>% 
  summarize(total_cases = sum(cases))
```

### Exercise
Using `table1` to calculate the TB cases per year in each country. (Hint: use `mean()`)

```{r}
#| code-fold: true
#| code-summary: "Show the code"
table1 %>% 
  group_by(country) %>% 
  summarize(mean_cases = mean(cases))
```

## Data transformation

### Columns and rows
`flights` is a dataset on flights that departed from New York City in 2013.
```{r, message=F}
#install.packages("nycflights13")
library(nycflights13)
flights
str(flights)
```
```{r}
# Subseting certain columns
flights_sub <- flights %>%
  select(c(month, day, flight, carrier, origin, dest, distance, air_time))

# Creating new columns that are derived from the existing columns
flights_sub <- flights_sub %>% 
  mutate(speed = distance / air_time * 60)


```

```{r}
# Filtering certain rows
flights_IAH <- flights %>%
  filter(dest == "IAH")

flights_summer <- flights %>%
   filter(month == 6 | month == 7 | month == 8) #OR

flights_summer <- flights %>%
   filter(month %in% c(6,7,8))

flights_jan1 <- flights %>% 
  filter(month == 1 & day == 1) #AND
```

```{r}
flights %>% 
  arrange(year, month, day, dep_time)

flights %>% 
  arrange(desc(dep_delay))
```

```{r}
flights %>% 
  distinct(origin, dest, .keep_all = TRUE)
```

```{r}
flights %>% 
  group_by(month) %>% 
  summarize(
    mean_delay = mean(dep_delay, na.rm = TRUE), 
    n = n()
  )

daily_flights <- flights %>%
  group_by(year, month, day) %>%
  summarize(
    mean_delay = mean(dep_delay, na.rm = TRUE), 
    n = n())
```


### Exercise
1. Using the same `flights` dataset to creat a new dataframe `flights_houston`, and: 

- Only include flights heading to Houston (`IAH` and `HOU`)
- Calcuate the speed ($speed = distance / air\_time * 60$)
- Only keep the columns of "year", "month", "day","dep_time", "carrier", "flight", and "speed"
- Arrange the data based on the speed with a desceding order.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
flights_houston <- flights %>% 
  filter(dest == "IAH" | dest == "HOU") %>% 
  mutate(speed = distance / air_time * 60) %>% 
  select(year:day, dep_time, carrier, flight, speed) %>% 
  arrange(desc(speed))

```

2. Using the same `flights` dataset to find out which **carrier** heading to which **airport** has the worst average delays?
```{r}
#| code-fold: true
#| code-summary: "Show the code"
delay_flights <- flights %>%
  group_by(carrier, dest) %>%
  summarize(
    mean_delay = mean(dep_delay, na.rm = TRUE), 
    n = n())
```


### Lengthening and widening data
In reality, you need long-format data much more commonly than wide-format data (such as visualizing in `ggplot2` and modeling).

- Wide format data: it has a column for each variable and a long format data. The `billboard` dataset records the billboard rank of songs in the year 2000:
```{r}
billboard
```
- Long format data: it has a column for possible variable types and a column for the values of those variables. `cms_patient_experience`, is a dataset from the Centers of Medicare and Medicaid services that collects data about patient experiences:
```{r}
cms_patient_experience
```
`tidyr` provides two functions for pivoting data:

- `pivot_longer()`: it takes wide-format data and turn it into long-format data (`melt` in `reshape2`).
[![Source: r4ds](image/long_format.png)](https://r4ds.hadley.nz/data-tidy)
- `pivot_wider()`: it takes long-format data and turn it into wide-format data (`cast` in `reshape2`).

```{r}
billboard %>% 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  )
```
```{r}
billoard_longer <- billboard %>% 
                    pivot_longer(
                      cols = starts_with("wk"), 
                      names_to = "week", 
                      values_to = "rank",
                      values_drop_na = TRUE) %>% 
                    mutate(week = parse_number(week))
```

But in reality, we might need to deal with multiple variables at the same time... Now, let's take a look at the `who2` dataset, the source of `table1` that you saw above.
```{r}
who2
```
This dataset is collected by the World Health Organisation, records information about tuberculosis diagnoses. There are two columns that are already variables and are easy to interpret: country and year. They are followed by 56 columns like "sp_m_014", "ep_m_4554", and "rel_m_3544". Each column name is made up of three pieces separated by "_". The first piece, "sp/rel/ep", describes the method used for the diagnosis, the second piece, "m/f" is the gender (coded as a binary variable in this dataset), and the third piece, "014/1524/2534/3544/4554/5564/65" is the age range ("014" represents "0-14", for example).

```{r}
who2_long <- who2 %>% 
              pivot_longer(
                cols = !(country:year),
                names_to = c("diagnosis", "gender", "age"), 
                names_sep = "_",
                values_to = "count"
              )
```

### Exercise
The following (wide) dataset shows the number of points scored by various NBA basketball players in different years. Please tranform it to a long format.
```{r}
nba <- data.frame(player=c('Joel Embiid', 'Luka Doncic', 'Jayson Tatum', 'Trae Young'),
                 year1=c(28.5, 27.7, 26.4,25.3),
                 year2=c(30.6, 28.4, 26.9, 28.4),
                 year3=c(33.1, 32.4, 30.1, 26.2))
```
```{r}
#| code-fold: true
#| code-summary: "Show the code"
nba_long <- nba %>%
  pivot_longer(cols=c('year1', 'year2', 'year3'),
               names_to='year',
               values_to='points')
nba_long
```



