---
title: "Week 3 Lab"
subtitle: Get familiar with R/RStudio
execute: 
  output: false
---

## RStudio Orientation

There are mainly four panels once you open the IDE (you can modify the theme and the layout under File - Preference - Appearance/Pane layout).

-   Console
-   Environment/History/...
-   Files/Plots/Viewer/...
-   Sources

## Reproducible research

**Reproducible**: Can someone else reproduce your entire analysis?

-   Available data
-   Available codes (including the random seed for machine learning)

We will be mainly using two types of file formats (other related formats such as Rproj and Rdata:

-   R script (a text file contains the same commands that your would enter on the command line of R)

-   RMarkdown

    -   Text, code, and results (from your analysis)
    -   Formatted output: html, pdf (which requires tex, a typesetting system), etc.
    -   Resource: [cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf), [The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)

    > R markdown is a simple and easy to use plain text language used to combine your R code, results from your data analysis (including plots and tables) and written commentary into a single nicely formatted and reproducible document (like a report, publication, thesis chapter or a web page like this one).[^1]

[^1]: Douglas, A. et al. (2023) [*An Introduction to R*](https://intro2r.com/)

Other examples of markup languages include (compared with Word):

-   HTML (HyperText Markup Language): website
-   LaTex: Overleaf
-   Markdown (a "lightweight" markup language)

## R packages

Until Sep 11th, 2023, there are 19861 available packages on [CRAN (The Comprehensive R Archive Network)](https://cran.r-project.org/web/packages/) package repository.

```{r}
# Install packages
## install.packages("xxx") - if on CRAN
## devtools::install_github("houyunhuang/ggcor") - if only on github
```

```{r, message=FALSE}
# Loading packages
library(dplyr)
```

```{r, message=FALSE}
# An elegant way to install and load packages by using a loop
 if (!require(dplyr)) {
    install.packages("dplyr")
    library(dplyr)
}

# With multiple packages
somepackages <- c("dplyr", "plyr", "magrittr")

for (pkg in somepackages) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
    library(pkg,character.only = TRUE)
  }
}
```

```{r, message=FALSE}
# Unload packages
detach("package:dplyr", unload = TRUE)

# Remove packages
## remove.packages("dplyr")
```

### The chunk options in R code

Global options: `knitr::opts_chunk$set(echo = FALSE)`

-   In this example, the `knitr::opts_chunk$set(echo = FALSE)` line in the setup chunk tells R Markdown to hide the R code within code chunks for the entire document, except when overridden within individual code chunks using `{r}` options. This is often used to create clean and readable reports or documents where you want to present the results of your R code without cluttering the document with the code itself.

Other (individual) chunk options:

-   `include = FALSE` prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.
-   `echo = FALSE` prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.
-   `message = FALSE` prevents messages that are generated by code from appearing in the finished file.
-   `warning = FALSE` prevents warnings that are generated by code from appearing in the finished.
-   `fig.cap = "..."` adds a caption to graphical results.

### Some useful packages

-   Data loading
    -   [xlsx](https://cran.rstudio.com/web/packages/xlsx/): read and write Micorsoft Excel files from R
    -   [haven](https://haven.tidyverse.org/): enable R to read and write data from SAS, SPSS, and Stata.
-   Data wrangling
    -   [tidyverse](https://www.tidyverse.org/): a collection of R packages designed for data science that share an underlying design philosophy, grammar, and data structures, for data import, tidying, and visualization listed here.
    -   [dplyr](https://posit.co/blog/introducing-dplyr/): essential shortcuts for subsetting, summarizing, rearranging, and joining together data sets.
    -   [tidyr](https://posit.co/blog/introducing-tidyr/): tools for changing the layout of your data sets. Use the gather and spread functions to convert your data into the tidy format, the layout R likes best.
    -   [stringr](https://stringr.tidyverse.org/): easy to learn tools for regular expressions and character strings.
    -   [lubridate](https://lubridate.tidyverse.org/): tools that make working with dates and times easier.
    -   [sna](https://cran.r-project.org/web/packages/sna/index.html) / [network](https://cran.r-project.org/web/packages/network/index.html): a range of tools for social network analysis.
-   Data visualization
    -   [ggplot2](https://ggplot2.tidyverse.org/): R's famous package for making beautiful graphics. ggplot2 lets you use the grammar of graphics to build layered, customizable plots.
    -   other extension of `ggplot2`
    -   [igraph](https://r.igraph.org/): a package for network analysis and visualization
-   Data modeling/analysis
    -   [tidymodels](https://www.tidymodels.org/): a collection of packages for modeling and machine learning using tidyverse principles
    -   [caret](https://cran.rstudio.com/web/packages/caret/): tools for *classification and regression training*
    -   [car](https://cran.r-project.org/web/packages/car/index.html): a hands-on *companion to applied regression*, especially the `anova` and `vif` function.
    -   [lme4](https://cran.r-project.org/web/packages/lme4/index.html): linear and Non-linear mixed effects models
    -   [quanteda](https://quanteda.io/): an R package for managing and analyzing text.
    -   [statnet](https://statnet.org/): a suite of open source R-based software packages for (statistical) network analysis

## R basic operators

### Arithmetic operators

```{r, message=FALSE}
1 + 19 # addition
19 - 1 # subtraction
5 * 4 # multiplication
10 / 2 # division
11 %/% 2 # integer division
41 %% 21 # modulus
20 ^ 2 # exponents
20 ** 2
```

```{r}
data <- data.frame(x1 = 1:3,  
                      x2 = 2:4,
                      x3 = 2)
data 
```

```{r}
data^2
```

### The `<-` operator

Assignment is a binary operator: the left side is a symbol/variable/object, the right is a value/expression being assigned to the left.

```{r}
x <- 1
x <- c(1, 2, 3, 4, 5)
x <- data.frame(x1 = 1:3,  
                x2 = 2:4,
                x3 = 2)
```

### The `[]` operator

Indexing is a binary operator (two operands: the object being indexed (e.g., a vector, list, or data frame) and the index or indices used to select specific elements from that object. )

```{r, message=FALSE}
x <- c(5, 4, 3, 2, 1)
x[1] # Extracts the first element
```

```{r, message=FALSE}
x <- data.frame(x1 = 1:3,  
                x2 = 2:4,
                x3 = 2)
x[3] 
x[,3]
x[3,]
x[3,2]
x["x3"]
```

### The `$` operator

The \$ operator is used to extract or subset a specific part of a data object in R.

1.  Extract the values in a data frame columns

```{r}
data <- data.frame(x1 = 1:5,  # Create example data
                   x2 = letters[1:5],
                   x3 = 9)
data  
```

```{r}
data$x2
```

2.  Return specific list elements

```{r}
my_list <- list(A = 1:5,  # Create example list
                B = letters[1:5],
                C = 9)
my_list # Print example list
```

```{r}
my_list$B # Extract element of list
```

### The `()` operator

A function call is also a binary operator as the left side is a symbol pointing to the function argument and the right side are the arguments

```{r}
max(1,2)
x <- max(1,2)
```

### The `?` operator

-   `?`: Search R documentation for a specific term.
-   `??`: Search R help files for a word or phrase.

### The `%>%` or `|>` opertor

`%>%` is a longstanding feature of the `magrittr` package for R. It takes the output of one function and passes it into another function as an argument. This allows us to link a sequence of analysis steps (think about a a conveyor belt in a factory)

-   Readability and clarity
-   East of modification
-   Avoid intermediate variables

```{r, message=FALSE}
library(tidyverse)
?group_by
?mtcars
mtcars

x <- filter(mtcars, cyl == 6)
y <- select(x, c("mpg", "hp"))

mtcars %>%
  filter(cyl == 6) %>%
  select(mpg, hp)


result <- mtcars %>%
  group_by(cyl) %>%
  summarise(meanMPG = mean(mpg))
```

### The `%in%` opertor

`%in%` is a matching feature to check if the values of the first argument are present in the second argument and returns a logical vector indicating if there is a match or not for its left operand. Here, the first and second arguments can be a value, vector, list, or sequence.

```{r}
# Check value in a Vector
67 %in% c(2,5,8,23,67,34)
45 %in% c(2,5,8,23,67,34)

# Check values from one vector present in another vector
vec1 <- c(2,5,8,23,67,34)
vec2 <- c(1,2,8,34) 
vec2 %in% vec1

# Check values in a dataframe
df=data.frame(
  emp_id=c(1,2,3,5),
  name=c("John","Rose","Williams", "Ray"),
  dept_id=c(10,20,10,50)
)

df$dept_state <- if_else(df$dept_id %in% c(10,50),'NY','CA')
df


df2 <- df[df$name %in% c('Ray','Rose'), ]
df2

```

## Data type in R

```{r}
# numeric (double if with more than two decimal numbers)
x <- 10.5
class(x)

# integer
x <- 1000L
class(x)


# complex
x <- 9i + 3
class(x)

# character/string
x <- "R is exciting"
class(x)

# logical/boolean
x <- TRUE
class(x)

# date
x = "01-06-2021"
x = as.Date(x, "%d-%m-%Y")
class(x)

# Factors
## Factors are the data objects which are used to categorize the data and store it as levels. 
## They can store both strings and integers. They are useful in the columns which have a limited number of unique values. Like Male/Female and True/False, etc. They are useful in data analysis for statistical modeling.
x <- c("East","South","East","North","North","East","West","West","West","South","North")
x_factor <- factor(x) ### as.factor
x_factor2 <- factor(x, levels = c("East", "West", "South", "North"))
summary(x_factor)
summary(x_factor2)

# Missing values
x <- c(1, 2, NA, 4)
is.na(x)
which(is.na(x))
x_omit <- na.omit(x)
```

#### Notes on `NA`

-   A missing value in a factor variable is displayed as `<NA>` rather than just `NA`.
-   R has a special value `NaN` for "not a number." 0/0 is an example of a calculation that will produce a NaN. NaNs print as NaN, but generally act like NAs.
-   Another special case is `Inf`, such as log(0)

### Exercise

1.  Create a new R script
2.  Install `quanteda` package (for textual analysis later in the semester) and load it
3.  Create a variable called `first_num` and assign it the value of `605`
4.  Create a variable called `first_char` and assign it the value of `my first character`
5.  Create a vector called `gender`, including: "male", "female", "other", "female", "male", "female", "female", "other", "male". Make `gender` as a factor vector, following the order of "female", "other", and "male".
